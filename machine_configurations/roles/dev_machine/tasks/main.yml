---
- name: install python-apt
  command: apt install python-apt
  register: install_output
  changed_when: install_output.stdout.find('python-apt is already the newest') == -1
  become: true

- name: install programs
  apt: name={{ item }}
  with_items:
  - curl
  - expect # needed for unbuffer tool used in ranger config creation hack
  - git
  - highlight # syntax coloring in ranger file preview
  - nmap
  - python3-pip
  - python3-dev
  - python-pip
  - python-dev
  - ranger
  - tmux
  - tree
  - vim
  - xclip # for tmux-yank
  become: true

- name: upgrade pip for python 3
  pip: name=pip executable=pip3 state=latest
  become: true
  
- name: upgrade pip for python 2
  pip: name=pip executable=pip2 state=latest
  become: true

- name: install python tools
  pip:
    name: "{{ item }}"
    executable: pip3
    extra_args: --user
  with_items:
  - httpie
  - ptpython
  - pudb
  - subliminal
  - tox
  - virtualenvwrapper

- name: install python 2 tools
  pip:
    name: "{{ item }}"
    executable: pip2
    extra_args: --user
  with_items:
  - bpython # to use with 2, because ptpython will work with 3
  - pudb

- name: setup tmux plugins
  git: repo=https://github.com/tmux-plugins/tpm dest={{ user_home }}/.tmux/plugins/tpm

- name: create directories for vim plugins
  file: path={{ user_home }}/.vim/{{ item }} state=directory
  with_items:
  - autoload
  - bundle

- name: setup vim plugin system
  get_url:
    url: https://tpo.pe/pathogen.vim
    dest: "{{ user_home }}/.vim/autoload/pathogen.vim"

- name: install vim-jedi
  git:
    repo: https://github.com/davidhalter/jedi-vim.git
    dest: "{{ user_home }}/.vim/bundle/jedi-vim"

- name: create ptpython config folder
  file: path={{ user_home }}/.ptpython state=directory

- name: set configuration files
  copy: src={{ item }} dest={{ user_home }}
  with_items:
  - .bash_aliases
  - .bashrc
  - .gitconfig
  - .ptpython
  - .tmux.conf
  - .vimrc

- name: create pudb config folder
  file: path={{ user_home }}/.config/pudb state=directory

- name: set pudb config
  copy: src=pudb.cfg dest={{ user_home }}/.config/pudb

- name: create ranger configs
  # unbuffer is used to fake a interactive terminal,
  # because the current stable version of ranger refuses to create a config
  command: unbuffer ranger --copy-config={{ item }}
  with_items:
  - rc
  - scope
  register: config_creation
  changed_when: config_creation.stdout.find('creating:') != -1

- name: ranger settings in rc.conf
  lineinfile:
    dest: "{{ user_home }}/.config/ranger/rc.conf"
    line: "{{ item.line }}" 
    regexp: "{{ item.regexp }}"
  with_items:
  - { line: "map <DELETE>   console delete", regexp: "map <DELETE>"}
  - { line: "set show_hidden true", regexp: "set show_hidden .+" }
  - { line: "set collapse_preview false", regexp: "set collapse_preview" }
  - { line: "set dirname_in_tabs true", regexp: "set dirname_in_tabs" }

- name: ranger settings in rifle.conf
  copy: src=rifle.conf dest={{ user_home }}/.config/ranger

- name: create user's bin folder
  file: path={{ user_home }}/bin state=directory

- name: copy tmux editting script
  copy:
    src: tmux_edit.sh
    dest: "{{ user_home }}/bin"
    mode: "u=xrw,g=xr,o=xr"

- name: ssh config folder
  file: path={{ user_home }}/.ssh state=directory

- name: set ssh key
  copy:
    src: "{{ item.src }}"
    dest: "{{ user_home }}/.ssh"
    mode: "{{ item.mode }}"
  with_items:
  - { src: id_rsa, mode: "u=rw,g-rwx,o-rwx" }
  - { src: id_rsa.pub, mode: "u=rw,g=r,o=r" }

- name: create develompent directory
  file: path={{ ansible_env.HOME }}/development state=directory

